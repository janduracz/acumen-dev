/* The following code was generated by JFlex 1.4.1 on 5/29/13 1:38 AM */

/*
 * Generated on 5/29/13 1:38 AM
 */
package acumen.ui.tl;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AcumenTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\36\1\15"+
    "\1\17\1\1\1\44\1\67\1\7\2\42\1\22\1\41\1\36\1\26"+
    "\1\24\1\21\1\4\1\64\1\62\1\6\4\6\2\3\1\50\1\36"+
    "\1\72\1\71\1\74\1\36\1\37\2\5\1\52\1\54\2\5\13\1"+
    "\1\66\10\1\1\73\1\11\1\40\1\70\1\2\1\0\1\32\1\14"+
    "\1\55\1\57\1\25\1\31\1\63\1\45\1\47\2\1\1\33\1\56"+
    "\1\13\1\53\1\46\1\65\1\30\1\34\1\27\1\12\1\60\1\51"+
    "\1\23\1\61\1\1\1\35\1\75\1\35\1\43\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\1\1\4\1\5\2\6"+
    "\11\1\1\7\1\6\3\1\1\6\5\1\5\6\1\10"+
    "\1\11\5\10\1\12\3\10\1\0\1\13\1\0\2\13"+
    "\1\1\2\4\1\14\1\15\1\16\1\1\1\17\26\1"+
    "\1\0\1\1\1\20\1\21\10\1\1\0\1\22\11\0"+
    "\1\17\1\0\1\23\2\1\1\4\1\24\1\4\1\1"+
    "\1\20\5\1\1\20\11\1\12\0\1\4\4\1\1\20"+
    "\7\1\2\0\1\25\2\0\1\26\1\0\1\4\6\1"+
    "\5\0\1\4\7\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\272"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\272\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\272\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u0516\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\272"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\272\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\u0c1c\0\272\0\272\0\272\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\370\0\370"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\u1496\0\272\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u0b62\0\u177e\0\u17bc"+
    "\0\u17fa\0\272\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e"+
    "\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u254c\0\u258a\0\u22a2\0\u25c8\0\u235c\0\u2606\0\u2644\0\u2682"+
    "\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\5\1\6\1\4\1\10"+
    "\1\4\1\5\1\11\1\5\1\12\2\4\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\15\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\4\1\15\1\27\1\30"+
    "\1\27\1\31\1\15\1\5\1\32\1\33\1\34\1\5"+
    "\1\35\1\5\1\36\1\37\1\40\1\41\2\5\1\6"+
    "\1\5\1\6\2\5\1\42\1\15\1\43\1\44\1\27"+
    "\1\45\1\46\10\47\1\50\11\47\1\51\6\47\1\52"+
    "\13\47\1\53\3\47\1\54\24\47\10\55\1\56\20\55"+
    "\1\57\13\55\1\60\3\55\1\61\24\55\77\0\6\5"+
    "\2\0\1\62\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\16\5\7\0\3\63\2\6"+
    "\1\63\1\6\2\0\4\63\2\0\1\63\3\0\1\63"+
    "\1\64\1\65\1\0\6\63\2\0\1\63\5\0\3\63"+
    "\1\0\11\63\1\6\1\63\1\6\2\63\7\0\3\63"+
    "\2\6\1\63\1\6\2\0\4\63\2\0\1\63\3\0"+
    "\1\66\1\64\1\65\1\0\6\63\2\0\1\63\5\0"+
    "\3\63\1\0\11\63\1\6\1\63\1\6\2\63\10\0"+
    "\6\5\2\0\1\62\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\2\5\1\67\13\5"+
    "\7\0\10\12\1\70\1\71\3\12\1\72\60\12\20\0"+
    "\1\13\76\0\1\73\1\74\54\0\6\5\2\0\1\62"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\2\5\1\75\13\5\12\0\2\76\1\0"+
    "\1\76\12\0\2\15\1\0\1\15\1\0\1\15\12\0"+
    "\1\15\20\0\1\76\1\0\1\76\3\0\1\15\6\0"+
    "\6\5\2\0\1\62\1\5\1\77\1\5\6\0\1\100"+
    "\1\0\1\5\1\0\4\5\1\101\1\5\10\0\3\5"+
    "\1\0\16\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\102\1\0\1\5\1\103\1\5\1\104"+
    "\2\5\10\0\3\5\1\0\2\5\1\105\5\5\1\106"+
    "\5\5\10\0\6\5\2\0\1\62\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\2\5\1\107\1\0"+
    "\2\5\1\110\13\5\10\0\6\5\2\0\1\62\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\3\5\1\111\1\112"+
    "\1\5\10\0\3\5\1\0\2\5\1\113\13\5\10\0"+
    "\6\5\2\0\1\62\2\5\1\114\6\0\1\5\1\0"+
    "\1\5\1\0\1\115\4\5\1\116\10\0\3\5\1\0"+
    "\4\5\1\117\11\5\10\0\6\5\2\0\1\62\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\2\5\1\120\13\5\10\0\6\5\2\0\1\62"+
    "\1\121\2\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\2\5\1\122\1\0\1\123\13\5\1\124\1\5"+
    "\30\0\1\125\145\0\1\15\5\0\6\5\2\0\1\62"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\1\5\1\126"+
    "\4\5\10\0\2\5\1\127\1\0\16\5\10\0\6\5"+
    "\2\0\1\62\1\5\1\130\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\130\3\5\10\0\3\5\1\0"+
    "\16\5\10\0\6\5\2\0\1\62\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\2\5"+
    "\1\131\13\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\2\5\1\132"+
    "\1\0\16\5\10\0\6\5\2\0\1\62\2\5\1\124"+
    "\6\0\1\5\1\0\1\133\1\0\1\5\1\134\1\5"+
    "\1\101\1\135\1\5\10\0\3\5\1\0\2\5\1\136"+
    "\13\5\10\0\6\5\2\0\1\62\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\2\5"+
    "\1\137\13\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\2\5\1\140\13\5\76\0\1\15\77\0\1\15\1\0"+
    "\1\141\73\0\2\15\74\0\1\15\2\0\1\15\76\0"+
    "\1\15\10\47\1\0\11\47\1\0\6\47\1\0\13\47"+
    "\1\0\3\47\1\0\24\47\21\0\1\142\103\0\1\143"+
    "\17\0\1\144\55\0\1\145\117\0\1\146\24\0\10\55"+
    "\1\0\20\55\1\0\13\55\1\0\3\55\1\0\24\55"+
    "\27\0\1\147\17\0\1\150\55\0\1\151\117\0\1\152"+
    "\36\0\1\153\63\0\7\63\2\0\4\63\2\0\1\63"+
    "\3\0\1\63\1\0\1\63\1\0\6\63\2\0\1\63"+
    "\5\0\3\63\1\0\16\63\12\0\2\76\1\0\1\76"+
    "\53\0\1\76\1\0\1\76\11\0\3\63\2\154\1\63"+
    "\1\154\2\0\4\63\2\0\1\63\3\0\1\63\1\0"+
    "\1\63\1\155\6\63\2\0\1\63\1\0\1\155\3\0"+
    "\3\63\1\0\11\63\1\154\1\63\1\154\2\63\7\0"+
    "\3\63\4\156\2\0\3\63\1\156\2\0\1\63\3\0"+
    "\1\63\1\0\1\156\1\0\2\63\2\156\2\63\2\0"+
    "\1\63\5\0\3\63\1\0\1\63\1\156\1\63\2\156"+
    "\1\63\1\156\2\63\1\156\1\63\1\156\2\63\10\0"+
    "\6\5\2\0\1\62\1\5\1\157\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\127\1\160\4\5\10\0\3\5"+
    "\1\0\16\5\7\0\11\70\1\161\3\70\1\162\64\70"+
    "\1\12\1\70\2\12\1\0\1\12\1\163\3\12\11\70"+
    "\3\12\30\70\1\12\1\70\1\12\11\70\1\0\6\5"+
    "\2\0\1\62\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\127\4\5\10\0\3\5\1\0\16\5\7\0"+
    "\3\63\2\76\1\63\1\76\2\0\4\63\2\0\1\63"+
    "\3\0\1\63\1\0\1\65\1\0\6\63\2\0\1\63"+
    "\5\0\3\63\1\0\11\63\1\76\1\63\1\76\2\63"+
    "\10\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\6\5\1\130"+
    "\7\5\10\0\6\5\2\0\1\62\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\1\5\1\127\1\5"+
    "\1\0\16\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\5\5\1\157\10\0\3\5"+
    "\1\0\16\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\164\4\5\10\0"+
    "\3\5\1\0\16\5\10\0\6\5\2\0\1\62\1\157"+
    "\2\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\16\5\10\0\6\5\2\0\1\62\1\5"+
    "\1\165\1\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\16\5\10\0\6\5\2\0\1\62"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\3\5\1\166\11\5\1\167\10\0\6\5"+
    "\2\0\1\62\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\1\5\1\157\1\5\1\0\16\5\10\0"+
    "\6\5\2\0\1\62\1\5\1\140\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\16\5"+
    "\10\0\6\5\2\0\1\62\1\170\2\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\16\5"+
    "\10\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\101\1\5\10\0\3\5\1\0"+
    "\16\5\10\0\6\5\2\0\1\62\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\2\5"+
    "\1\16\13\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\130\4\5\10\0"+
    "\3\5\1\0\16\5\10\0\6\5\2\0\1\62\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\5\5\1\127\10\0"+
    "\3\5\1\0\16\5\10\0\6\5\2\0\1\62\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\3\5\1\171\2\5"+
    "\10\0\3\5\1\0\16\5\10\0\6\5\2\0\1\62"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\2\5\1\172\1\0\16\5\10\0\6\5\2\0\1\62"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\2\5\1\114\13\5\10\0\6\5\2\0"+
    "\1\62\3\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\12\5\1\173\3\5\10\0\6\5"+
    "\2\0\1\62\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\5\5\1\130\10\5\10\0"+
    "\6\5\2\0\1\62\1\5\1\165\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\12\5"+
    "\1\174\3\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\2\5\1\175"+
    "\1\0\16\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\140\4\5\10\0"+
    "\3\5\1\0\16\5\35\0\1\15\50\0\6\5\2\0"+
    "\1\62\3\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\2\5\1\176\1\0\16\5\10\0\6\5\2\0"+
    "\1\62\1\5\1\177\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\16\5\10\0\6\5"+
    "\2\0\1\62\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\5\5\1\200\10\0\3\5\1\0\16\5\10\0\6\5"+
    "\2\0\1\62\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\2\5\1\201\1\0\16\5\10\0\6\5"+
    "\2\0\1\62\3\5\6\0\1\5\1\0\1\202\1\0"+
    "\6\5\10\0\3\5\1\0\2\5\1\203\13\5\10\0"+
    "\6\5\2\0\1\62\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\3\5\1\204\2\5\10\0\3\5\1\0\16\5"+
    "\10\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\5\5\1\165\10\0\3\5\1\0\16\5"+
    "\10\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\7\5\1\157"+
    "\6\5\10\0\6\5\2\0\1\62\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\127\5\5\10\0\3\5\1\0"+
    "\16\5\36\0\1\205\17\0\1\205\74\0\1\206\62\0"+
    "\1\207\71\0\1\210\117\0\1\211\72\0\1\212\62\0"+
    "\1\213\71\0\1\214\117\0\1\215\27\0\4\216\5\0"+
    "\1\216\10\0\1\216\3\0\2\216\17\0\1\216\1\0"+
    "\2\216\1\0\1\216\2\0\1\216\1\0\1\216\11\0"+
    "\3\63\2\154\1\63\1\154\2\0\4\63\2\0\1\63"+
    "\3\0\1\63\1\0\1\63\1\0\6\63\2\0\1\63"+
    "\5\0\3\63\1\0\11\63\1\154\1\63\1\154\2\63"+
    "\12\0\2\154\1\0\1\154\53\0\1\154\1\0\1\154"+
    "\12\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\130\1\0\6\5\10\0\3\5\1\0\16\5\10\0"+
    "\6\5\2\0\1\62\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\5\5\1\127\10\5"+
    "\7\0\10\70\1\0\70\70\4\217\2\70\1\161\2\70"+
    "\1\217\1\162\7\70\1\217\3\70\2\217\17\70\1\217"+
    "\1\70\2\217\1\70\1\217\2\70\1\217\1\70\1\217"+
    "\11\70\1\0\6\5\2\0\1\62\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\5\5"+
    "\1\220\10\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\1\127\2\5"+
    "\1\0\16\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\221\1\0\6\5\10\0\3\5\1\0"+
    "\16\5\10\0\6\5\2\0\1\62\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\3\5\1\222\2\5\10\0\3\5"+
    "\1\0\16\5\10\0\6\5\2\0\1\62\1\5\1\223"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\16\5\10\0\6\5\2\0\1\62\1\5"+
    "\1\224\1\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\16\5\10\0\6\5\2\0\1\62"+
    "\1\5\1\127\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\16\5\10\0\6\5\2\0"+
    "\1\62\3\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\13\5\1\225\2\5\10\0\6\5"+
    "\2\0\1\62\1\5\1\226\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\16\5\10\0"+
    "\6\5\2\0\1\62\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\227\5\5\10\0\3\5\1\0\16\5\10\0"+
    "\6\5\2\0\1\62\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\7\5\1\202\6\5"+
    "\10\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\230\5\5\10\0\3\5\1\0\16\5"+
    "\10\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\4\5\1\231"+
    "\11\5\10\0\6\5\2\0\1\62\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\127\1\5\10\0\3\5"+
    "\1\0\16\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\3\5\1\232\2\5\10\0"+
    "\3\5\1\0\16\5\10\0\6\5\2\0\1\62\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\5\5\1\114\10\0"+
    "\3\5\1\0\16\5\10\0\6\5\2\0\1\62\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\5\5\1\233\10\0"+
    "\2\5\1\121\1\0\16\5\47\0\1\15\105\0\1\234"+
    "\52\0\1\206\116\0\1\235\53\0\1\236\121\0\1\237"+
    "\52\0\1\212\116\0\1\240\53\0\1\241\54\0\4\242"+
    "\5\0\1\242\10\0\1\242\3\0\2\242\17\0\1\242"+
    "\1\0\2\242\1\0\1\242\2\0\1\242\1\0\1\242"+
    "\11\0\3\70\4\243\2\70\1\161\2\70\1\243\1\162"+
    "\7\70\1\243\3\70\2\243\17\70\1\243\1\70\2\243"+
    "\1\70\1\243\2\70\1\243\1\70\1\243\11\70\1\0"+
    "\6\5\2\0\1\62\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\2\5\1\244\1\0\16\5\10\0"+
    "\6\5\2\0\1\62\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\12\5\1\245\3\5"+
    "\10\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\6\5\1\246"+
    "\7\5\10\0\6\5\2\0\1\62\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\6\5"+
    "\1\127\7\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\11\5\1\127\4\5\10\0\3\5\1\127\2\5\2\0"+
    "\1\62\3\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\16\5\10\0\6\5\2\0\1\62"+
    "\1\160\2\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\16\5\10\0\6\5\2\0\1\62"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\4\5\1\247\11\5\10\0\6\5\2\0"+
    "\1\62\3\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\2\5\1\250\1\0\16\5\10\0\6\5\2\0"+
    "\1\62\3\5\6\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\251\4\5\10\0\3\5\1\0\16\5\10\0\6\5"+
    "\2\0\1\62\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\157\5\5\10\0\3\5\1\0\16\5\10\0\6\5"+
    "\2\0\1\62\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\5\5\1\130\10\0\3\5\1\0\16\5\30\0\1\252"+
    "\110\0\1\206\13\0\1\234\26\0\1\236\1\253\4\236"+
    "\1\253\2\0\3\236\2\0\1\253\1\0\1\236\1\253"+
    "\1\236\1\253\1\236\1\253\6\236\1\0\7\253\3\236"+
    "\1\253\16\236\1\253\1\0\1\253\1\0\1\253\23\0"+
    "\1\254\110\0\1\212\13\0\1\237\26\0\1\241\1\255"+
    "\4\241\1\255\2\0\3\241\2\0\1\255\1\0\1\241"+
    "\1\255\1\241\1\255\1\241\1\255\6\241\1\0\7\255"+
    "\3\241\1\255\16\241\1\255\1\0\1\255\1\0\1\255"+
    "\5\0\4\256\5\0\1\256\10\0\1\256\3\0\2\256"+
    "\17\0\1\256\1\0\2\256\1\0\1\256\2\0\1\256"+
    "\1\0\1\256\11\0\3\70\4\257\2\70\1\161\2\70"+
    "\1\257\1\162\7\70\1\257\3\70\2\257\17\70\1\257"+
    "\1\70\2\257\1\70\1\257\2\70\1\257\1\70\1\257"+
    "\11\70\1\0\6\5\2\0\1\62\1\5\1\202\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\16\5\10\0\6\5\2\0\1\62\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\260\4\5\10\0"+
    "\3\5\1\0\16\5\10\0\6\5\2\0\1\62\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\2\5"+
    "\1\261\1\0\16\5\10\0\6\5\2\0\1\62\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\1\130"+
    "\2\5\1\0\16\5\10\0\6\5\2\0\1\62\1\5"+
    "\1\262\1\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\16\5\10\0\6\5\2\0\1\62"+
    "\3\5\6\0\1\5\1\0\1\232\1\0\6\5\10\0"+
    "\3\5\1\0\16\5\30\0\1\236\75\0\1\241\57\0"+
    "\4\5\5\0\1\5\10\0\1\5\3\0\2\5\17\0"+
    "\1\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0"+
    "\1\5\11\0\3\70\4\12\2\70\1\161\2\70\1\12"+
    "\1\162\7\70\1\12\3\70\2\12\17\70\1\12\1\70"+
    "\2\12\1\70\1\12\2\70\1\12\1\70\1\12\11\70"+
    "\1\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\263\1\0\6\5\10\0\3\5\1\0\16\5\10\0"+
    "\6\5\2\0\1\62\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\3\5\1\264\2\5\10\0\3\5\1\0\16\5"+
    "\10\0\6\5\2\0\1\62\1\265\2\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\16\5"+
    "\10\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\114\1\0\6\5\10\0\3\5\1\0\16\5\10\0"+
    "\6\5\2\0\1\62\1\5\1\114\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\16\5"+
    "\10\0\6\5\2\0\1\62\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\2\5\1\266"+
    "\13\5\10\0\6\5\2\0\1\62\1\233\2\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\16\5\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10292];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\4\1\1\11\11\1\1\11"+
    "\20\1\1\11\5\1\1\11\3\1\1\0\1\1\1\0"+
    "\5\1\3\11\30\1\1\0\13\1\1\0\1\11\11\0"+
    "\1\1\1\0\4\1\1\11\22\1\12\0\15\1\2\0"+
    "\1\1\2\0\1\1\1\0\7\1\5\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AcumenTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AcumenTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AcumenTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 24: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 19: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 26: break;
        case 20: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 27: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 31: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 32: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 33: break;
        case 16: 
          { addToken(Token.FUNCTION);
          }
        case 34: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 35: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 36: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 37: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 38: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 39: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 40: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 41: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 42: break;
        case 8: 
          { 
          }
        case 43: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 183: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 184: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 185: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
