//Author: Jawad Masood
//ID: A2
//The simulation case describes the testing vehicle 
//approaching from behind towards the reference 
//stationary object (car/pedestrian). Simulation shows 
//the testing vehicle kinematic maneuver when critical 
//distance between testing vehicle and reference stationary 
//object/Vehicle crosses threshold values. Two wheel planar 
//differential vehicle was modeled in local reference frame, 
//where the position, orientation, linear velocity and 
//rotational velocity were defined in terms of right and 
//left side wheels. The yaw angle was used as the control 
//variable for safe maneuver. The local planner position and 
//velocity vector was then translated in global cartesian 
//coordinates.  3D visualization of the planar vehicle was 
//represented by rectangular box; the straight road was 
//represented by a fixed rectangular box; the sensor was 
//represented by the single variable which calculate the 
//distance between testing vehicle and stationary vehicle. 
//The left and right tire constant velocity was provided to 
//get the velocity and orientation at the center of the 
//vehicle. 
//*****************Vehicle Mechanics************************************************//
model VehicleMechanics(v_r,v_l,l,x0) = //(Planner Kinematics)
initially 
  x = x0 ,
  x' = 0 ,
  y = 0 ,
  y' = 0 ,
  th' = 0 ,
  R = 0 ,
  w = 0 ,
  V = 0 ,
  s = 0 ,
  th  =  0      
always
  V= (1/2)*(v_r+v_l) ,
  w= (v_r-v_l)/l ,
  x'= V*cos(th) ,
  y' = V*sin(th) 
 //*********************Machine Sensor********************************************// 
model Sensor(x0,s0,r) = 
initially
  x = x0 ,
  s = s0 
always  
  s = r-x 

//*********************ADAS********************************************// 
model Control(s0,th0) = //(Switch control)
initially
  s  =  s0 ,
  th  =  th0 
always 
  if s<=10 && s>=7 then
    th = -(pi/8) 
  elseif s<=-7 && s>=-10 then
    th = (pi/8)
  else
    th = 0 
  
//**********************SIMULATOR*******************************************//
model Main(simulator) = 
initially 
  mechanics  =  create VehicleMechanics(10,10,0.5,0) ,    
  subject  =  create VehicleT((0,0,0),1,2,(0,0,0),"car") ,
  target  =  create VehicleS((50,0,0),1,2,"car") ,
  environment  =  create Road() ,
  sens  =  create Sensor(0,0,50) ,
  controller  =  create Control(0,0) ,
  _3DView  =  () 
always
  sens.x = mechanics.x  ,
  controller.s = sens.s ,
  mechanics.th = controller.th ,
  subject.p = (mechanics.x,mechanics.y,0) ,
  subject.o = (0,0,pi+mechanics.th) ,
  _3DView = ((mechanics.x-10,mechanics.y,5),(mechanics.x,mechanics.y,0.5)) ,
  simulator.endTime+ = 25 


//**********************Environment*******************************************//
model Road() = 
initially
  mode  =  "spawn" ,
    _3D  =  () 
always
  _3D = (Box center=(0,0,-0.9144/2) size=(1000,3.9624,0.1) color=(0.3,0.3,0.3) rotation=(0,0,0), // Straignt Single Standard Road
         Box center=(0,3.9624/2,-0.93/2) size=(1000,0.15,0.11) color=(255,255,255) rotation=(0,0,0), // left road side line
         Box center=(0,-3.9624/2,-0.93/2) size=(1000,0.15,0.1) color=(255,255,255) rotation=(0,0,0), // right road side line
         Box center=(0,0,-0.90/2) size=(3,0.15,0.1) color=(255,255,255) rotation=(0,0,0)), 
  match mode with [
    "spawn" ->
      create Stripe(0, 33) ,
      mode + = "persist" 
  | "persist" -> ]

model Stripe(xstart, stripesLeft) = 
initially
  _3D  =  (Box center=(xstart,0,-0.90/2) size=(3,0.15,0.1) color=(255,255,255) rotation=(0,0,0)) ,
  mode  =  "spawn" 
always
  match mode with [
    "spawn" ->
      if stripesLeft > 0 then
        create Stripe(xstart + 7.5, stripesLeft - 1) ,
        mode + = "persist" 
      noelse 
  | "persist" -> ],
  _3D = (Box center=(xstart,0,-0.90/2) size=(3,0.15,0.1) color=(255,255,255) rotation=(0,0,0)) // center lane


//**************************VISUALIZATION***************************************//
model VehicleT(p,d,s,o,name) = 
initially
  _3D  =  ()
always      
  _3D = (Obj center=p size=1 color=(1,1,1) rotation=o content=name)

model VehicleS(p,d,s,name) = 
initially
  _3D  =  ()
always      
  _3D = (Obj center=p size=1 color=(1,1,1) rotation=(0,0,d*pi) content=name) 
 